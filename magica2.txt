src/
├── redux/
│   ├── slices/
│   │   └── userSlice.js
│   └── store.js
└── pages/
    └── DashboardPage.js


1. Redux User Slice (redux/slices/userSlice.js)


import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  user: {
    id: '123',
    name: 'John Doe',
    email: 'john@example.com',
    image: 'https://via.placeholder.com/150',
    mobile: '1234567890',
    address: '123 Main St, City'
  },
  loading: false,
  error: null,
  isEditing: false
};

const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    startEditing: (state) => {
      state.isEditing = true;
    },
    cancelEditing: (state) => {
      state.isEditing = false;
    },
    updateProfileStart: (state) => {
      state.loading = true;
      state.error = null;
    },
    updateProfileSuccess: (state, action) => {
      state.user = action.payload;
      state.loading = false;
      state.isEditing = false;
    },
    updateProfileFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    }
  }
});

export const { 
  startEditing, 
  cancelEditing,
  updateProfileStart, 
  updateProfileSuccess, 
  updateProfileFailure 
} = userSlice.actions;

export const updateUserProfile = (userData) => async (dispatch) => {
  dispatch(updateProfileStart());
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000));
    dispatch(updateProfileSuccess(userData));
  } catch (err) {
    dispatch(updateProfileFailure(err.message));
  }
};

export default userSlice.reducer;


2. Redux Store (redux/store.js)

import { configureStore } from '@reduxjs/toolkit';
import userReducer from './slices/userSlice';

export const store = configureStore({
  reducer: {
    user: userReducer
  }
});

export default store;



3. Dashboard Page with Bootstrap 5 (pages/DashboardPage.js)

import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { 
  startEditing, 
  cancelEditing,
  updateUserProfile 
} from '../redux/slices/userSlice';

const DashboardPage = () => {
  const dispatch = useDispatch();
  const { user, loading, error, isEditing } = useSelector((state) => state.user);
  
  const [formData, setFormData] = useState({ ...user });
  const [imagePreview, setImagePreview] = useState(user.image);

  useEffect(() => {
    setFormData({ ...user });
    setImagePreview(user.image);
  }, [user]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setImagePreview(reader.result);
        setFormData({
          ...formData,
          image: reader.result
        });
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    dispatch(updateUserProfile(formData));
  };

  return (
    <div className="container mt-5">
      <div className="row justify-content-center">
        <div className="col-md-8">
          <div className="card shadow">
            <div className="card-header bg-primary text-white">
              <h2 className="mb-0">User Profile</h2>
            </div>
            
            <div className="card-body">
              {error && (
                <div className="alert alert-danger alert-dismissible fade show">
                  {error}
                  <button 
                    type="button" 
                    className="btn-close" 
                    onClick={() => dispatch(cancelEditing())}
                  ></button>
                </div>
              )}

              <form onSubmit={handleSubmit}>
                <div className="row mb-4">
                  <div className="col-md-4 text-center">
                    <img 
                      src={imagePreview} 
                      alt="Profile" 
                      className="img-thumbnail rounded-circle mb-3"
                      style={{ width: '150px', height: '150px', objectFit: 'cover' }}
                    />
                    {isEditing && (
                      <div className="d-grid">
                        <input
                          type="file"
                          accept="image/*"
                          onChange={handleImageChange}
                          className="form-control"
                          id="profileImage"
                          hidden
                        />
                        <label 
                          htmlFor="profileImage" 
                          className="btn btn-outline-primary btn-sm"
                        >
                          Change Photo
                        </label>
                      </div>
                    )}
                  </div>
                  
                  <div className="col-md-8">
                    <div className="mb-3">
                      <label className="form-label">Name</label>
                      {isEditing ? (
                        <input
                          type="text"
                          name="name"
                          value={formData.name}
                          onChange={handleChange}
                          className="form-control"
                          required
                        />
                      ) : (
                        <p className="form-control-plaintext">{user.name}</p>
                      )}
                    </div>
                    
                    <div className="mb-3">
                      <label className="form-label">Email</label>
                      {isEditing ? (
                        <input
                          type="email"
                          name="email"
                          value={formData.email}
                          onChange={handleChange}
                          className="form-control"
                          required
                        />
                      ) : (
                        <p className="form-control-plaintext">{user.email}</p>
                      )}
                    </div>
                    
                    <div className="mb-3">
                      <label className="form-label">Mobile Number</label>
                      {isEditing ? (
                        <input
                          type="tel"
                          name="mobile"
                          value={formData.mobile}
                          onChange={handleChange}
                          className="form-control"
                        />
                      ) : (
                        <p className="form-control-plaintext">{user.mobile}</p>
                      )}
                    </div>
                  </div>
                </div>
                
                <div className="mb-3">
                  <label className="form-label">Address</label>
                  {isEditing ? (
                    <textarea
                      name="address"
                      value={formData.address}
                      onChange={handleChange}
                      className="form-control"
                      rows="3"
                    />
                  ) : (
                    <p className="form-control-plaintext">{user.address}</p>
                  )}
                </div>
                
                <div className="d-flex justify-content-end gap-2">
                  {!isEditing ? (
                    <button
                      type="button"
                      className="btn btn-primary"
                      onClick={() => dispatch(startEditing())}
                    >
                      <i className="bi bi-pencil me-2"></i>Edit Profile
                    </button>
                  ) : (
                    <>
                      <button
                        type="button"
                        className="btn btn-outline-secondary"
                        onClick={() => dispatch(cancelEditing())}
                        disabled={loading}
                      >
                        Cancel
                      </button>
                      <button
                        type="submit"
                        className="btn btn-primary"
                        disabled={loading}
                      >
                        {loading ? (
                          <>
                            <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            Saving...
                          </>
                        ) : (
                          'Save Changes'
                        )}
                      </button>
                    </>
                  )}
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DashboardPage;



4. Add Bootstrap to Your Project
Make sure you have Bootstrap 5 installed and the icons library:

bash

npm install bootstrap @popperjs/core bootstrap-icons
Then add this to your src/index.js:


import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min';
import 'bootstrap-icons/font/bootstrap-icons.css';